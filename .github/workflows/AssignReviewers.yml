## @file
# Assign reviewers
#
# Copyright (c) 2022, Intel Corporation. All rights reserved.<BR>
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

name: Assign reviewers from .github/REVIEWERS using CODEWONERS syntax

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - master
      - 'releases/**'

permissions:
    pull-requests: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  assign_reviewers:
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump Requested Reviewers
        env:
          REVIEWER_CONTEXT: ${{ toJSON(github.event.pull_request.requested_reviewers) }}
        run: echo "$REVIEWER_CONTEXT"
      - uses: actions/checkout@v3
        with:
          ref: ${{github.event.pull_request.base.ref}}
      - uses: actions/setup-python@v2
      - run: pip install codeowners GitPython PyGithub
      - name: Assign Reviewers from .github/REVIEWERS
        env:
          REVIEWER_CONTEXT: ${{ toJSON(github.event.pull_request.requested_reviewers) }}
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import os
            import json
            from codeowners import CodeOwners
            from git import Git
            from github import Github
            Hub = Github('${{ secrets.GITHUB_TOKEN }}')
            print ('Hub:', Hub)
            CurrentReviewers = [x['login'] for x in json.loads (os.environ['REVIEWER_CONTEXT'])]
            print ('CurrentReviewers:', CurrentReviewers)
            AllReviewers = CodeOwners(open('.github/REVIEWERS').read())
            LocalRepo = Git('.')
            LocalRepo.fetch(
                        'origin',
                        '+refs/pull/${{ github.event.pull_request.number }}/*:refs/remotes/origin/pr/${{ github.event.pull_request.number }}/*',
                        depth=${{ github.event.pull_request.commits }} + 1
                        )
            AddReviewers = []
            for File in LocalRepo.diff('${{github.event.pull_request.head.sha}}~${{ github.event.pull_request.commits }}..${{github.event.pull_request.head.sha}}','--name-only').split():
                print ('File:', File, AllReviewers.of(File))
                for FileReviewer in AllReviewers.of(File):
                    FileReviewerLogin = FileReviewer[1].lstrip('@')
                    if '@' in FileReviewerLogin:
                        for User in Hub.search_users(FileReviewerLogin + ' in email'):
                            if FileReviewerLogin == User.email:
                                FileReviewerLogin = User.login
                                break
                    if FileReviewerLogin not in CurrentReviewers and FileReviewerLogin not in AddReviewers:
                        AddReviewers.append(FileReviewerLogin)
            print ('AddReviewers:', AddReviewers)
            if AddReviewers:
                HubRepo = Hub.get_repo('${{ github.event.repository.full_name }}')
                print ('HubRepo:', HubRepo)
                HubPullRequest = HubRepo.get_pull(${{ github.event.pull_request.number }})
                print ('HubPullRequest:', HubPullRequest)
                HubPullRequest.create_review_request(AddReviewers)
                UpdatedReviewers = [x.login for x in HubPullRequest.get_review_requests()[0]]
                print ('UpdatedReviewers:', UpdatedReviewers)
